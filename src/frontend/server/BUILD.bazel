load("@npm_bazel_typescript//:index.bzl", "ts_library")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")

package(default_visibility = ["//visibility:public"])

ts_library(
    name = "app",
    srcs = glob(
        include = ["**/*.ts"],
        exclude = ["**/*spec.ts"],
    ),
    tsconfig = "//:tsconfig.server.json",
    deps = [
        "//src/frontend/client:main_server",
        "@npm//@nestjs",
        "@npm//@types",
        "@npm//compression",
        "@npm//tslib",
    ],
)

nodejs_binary(
    name = "server",
    data = [
        ":app",
        "//src/frontend/client:pwa",
    ],
    entry_point = ":main.ts",
    node_modules = "@npm//:node_modules",
    templated_args = ["--node_options=--expose-gc"],
)

nodejs_image(
    name = "image",
    data = [
        ":app",
        "//src/frontend/client:pwa",
    ],
    entry_point = ":main.ts",
    node_modules = "@npm//:node_modules",
    tags = ["local"],
    templated_args = ["--node_options=--expose-gc"],
)

container_image(
    name = "container",
    base = ":image",
    tags = ["local"],
)

k8s_deploy(
    name = "deploy",
    images = {
        "gcr.io/internal-200822/src:nodejs_image": ":container",
    },
    template = "//:deployment.yaml",
)
