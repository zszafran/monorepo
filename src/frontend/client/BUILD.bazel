load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary", "sass_library")
load("@npm_bazel_typescript//:index.bzl", "ts_devserver")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("//src/tools:angular_ts_library.bzl", "ng_ts_library")
load("//src/tools:angular_prerender.bzl", "ng_prerender")
load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@npm//@babel/cli:index.bzl", "babel")
load("@npm_bazel_terser//:index.bzl", "terser_minified")
load("//src/tools:angular_serviceworker.bzl", "ngsw_config")
load("@npm//history-server:index.bzl", "history_server")

package_group(
    name = "internal",
    packages = [
        "//src/frontend/client/...",
        "//src/frontend/server/...",
    ],
)

package(default_visibility = [":internal"])

_ASSETS = [
    ":manifest.webmanifest",
    ":styles.css",
    "@npm//:node_modules/zone.js/dist/zone.min.js",
]

sass_library(
    name = "angular_material_theming",
    srcs = [
        "@npm//:node_modules/@angular/material/_theming.scss",
    ],
)

sass_binary(
    name = "styles",
    src = "styles.scss",
    deps = [
        ":angular_material_theming",
        "//src/frontend/client/app:app_theme",
    ],
)

ng_ts_library(
    name = "main",
    srcs = [
        "main.dev.ts",
        "main.prod.ts",
    ],
    tsconfig = "//:tsconfig.client.json",
    deps = [
        "//src/frontend/client/app",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
        "@npm//@angular/router",
        "@npm//@ngrx/store",
        "@npm//zone.js",
    ],
)

ng_ts_library(
    name = "main_server",
    srcs = [
        "main.server.ts",
    ],
    tsconfig = "//:tsconfig.server.json",
    deps = [
        "//src/frontend/client/app:app_server",
        "@npm//@angular/core",
        "@npm//@angular/platform-server",
        "@npm//@angular/router",
        "@npm//@ngrx/store",
        "@npm//zone.js",
    ],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(execpath :index.dev.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        # This file doesn't exist during the build, but will be served by ts_devserver
        "./_/ts_scripts.js",
    ],
    data = [":index.dev.html"] + _ASSETS,
)

ts_devserver(
    name = "devserver",
    entry_module = "monorepo/src/frontend/client/main.dev",
    port = 8080,
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        ":rxjs_umd_modules",
        "@npm//date-fns:date-fns.umd.js",
        "@npm//ngrx-store-logger:ngrx-store-logger__umd",
    ],
    # Serve these files in addition to the JavaScript bundle
    static_files = _ASSETS + [
        ":inject_scripts_for_dev",
        "//src/frontend/client/assets",
    ],
    # Tell Bazel to build the sources first
    deps = [":main"],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "//:rollup.config.js",
    entry_points = {
        ":main.prod.ts": "index",
    },
    output_dir = True,
    deps = [
        ":main",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

babel(
    name = "bundle-es5",
    args = [
        "$(execpath :bundle-es2015)",
        "--no-babelrc",
        "--source-maps",
        "--presets=@babel/preset-env",
        "--out-dir",
        "$(@D)",
    ],
    data = [
        ":bundle-es2015",
        "@npm//@babel/preset-env",
    ],
    output_dir = True,
)

terser_minified(
    name = "bundle-es2015.min",
    src = ":bundle-es2015",
)

terser_minified(
    name = "bundle-es5.min",
    src = ":bundle-es5",
)

ng_prerender(
    name = "prerender",
    app = "//src/frontend/client/app:app_server",
    index = "index.prod.html",
    prerender_roots = [
        "home",
    ],
    renderer = ":prerender.ts",
)

html_insert_assets(
    name = "inject_scripts_for_prod",
    # we can't output "src/example/index.html" since that collides with the devmode file.
    # pkg_web rule will re-root paths that start with _{name} by default
    # so we output "_package/src/example/index.html" so that it is mapped to
    # `example/index.html` in the web package.
    outs = ["_package/src/frontend/client/index.html"],
    args = [
        "--html=$(execpath :prerender.root)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS],
    data = [":prerender.root"] + _ASSETS,
)

html_insert_assets(
    name = "inject_scripts_for_prod_home_route_index",
    outs = ["_package/src/frontend/client/home/index.html"],
    args = [
        "--html=$(execpath :prerender.home)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS],
    data = [":prerender.home"] + _ASSETS,
)

pkg_web(
    name = "package",
    srcs = _ASSETS + [
        ":bundle-es2015.min",
        ":bundle-es5.min",
        # each injected index file should be listed here
        ":inject_scripts_for_prod",
        ":inject_scripts_for_prod_home_route_index",
        "//src/frontend/client/assets",
        # Include polyfills that will be requested by old browsers
        "@npm//:node_modules/@angular/service-worker/ngsw-worker.js",
        "@npm//:node_modules/systemjs/dist/system.js",
        "@npm//:node_modules/core-js/client/core.min.js",
    ],
    # In production mode we serve some polyfills with script tags that have hard-coded paths in the index.html
    # so we must serve them at that path, by stripping a prefix
    additional_root_paths = [
        "npm/node_modules/@angular/service-worker",
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
    ],
)

ngsw_config(
    name = "pwa",
    src = ":package",
    config = ":ngsw-config.json",
    index_html = ":inject_scripts_for_prod",
)

history_server(
    name = "prodserver",
    data = [":pwa"],
    templated_args = ["-a $$(rlocation $(rootpath :pwa))"],
)
